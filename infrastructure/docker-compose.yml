services:
  # Database Service
  postgres:
    image: postgres:15-alpine
    container_name: conversation-ui-postgres
    environment:
      POSTGRES_DB: conversation_ui
      POSTGRES_USER: conversation_user
      POSTGRES_PASSWORD: conversation_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - conversation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U conversation_user -d conversation_ui"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Management Service
  management-service:
    build:
      context: ../backend/management-service
      dockerfile: Dockerfile
    container_name: conversation-ui-management
    environment:
      SPRING_PROFILES_ACTIVE: docker
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_ENABLED: ${OPENAI_ENABLED:-false}
    ports:
      - "8080:8080"
    networks:
      - conversation-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Navigation Service
  navigation-service:
    build:
      context: ../backend/navigation-service
      dockerfile: Dockerfile
    container_name: conversation-ui-navigation
    environment:
      SPRING_PROFILES_ACTIVE: docker
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_ENABLED: ${OPENAI_ENABLED:-false}
    ports:
      - "8081:8081"
    networks:
      - conversation-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      management-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Management UI (Frontend)
  management-ui:
    build:
      context: ../frontend/management-ui
      dockerfile: Dockerfile
    container_name: conversation-ui-management-ui
    ports:
      - "3000:80"
    networks:
      - conversation-network
    restart: unless-stopped
    depends_on:
      management-service:
        condition: service_healthy
      navigation-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: conversation-ui-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@conversation-ui.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - conversation-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy


  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: conversation-ui-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - conversation-network
    restart: unless-stopped
    depends_on:
      management-service:
        condition: service_healthy
      navigation-service:
        condition: service_healthy
      management-ui:
        condition: service_healthy
      chat-widget-mfe:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  conversation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
