# Development override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

version: '3.8'

services:
  # Development overrides for Management Service
  management-service:
    build:
      context: ../backend/management-service
      dockerfile: Dockerfile
      target: builder  # Stop at builder stage for development
    volumes:
      - ../backend/management-service/src:/app/src:ro
      - ../backend/management-service/target:/app/target
    environment:
      SPRING_PROFILES_ACTIVE: docker,dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_ENABLED: ${OPENAI_ENABLED:-false}
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: DEBUG
      LOGGING_LEVEL_COM_EXAMPLE_DEMO: DEBUG
    command: ["mvn", "spring-boot:run", "-Dspring-boot.run.profiles=docker,dev"]

  # Development overrides for Navigation Service
  navigation-service:
    build:
      context: ../backend/navigation-service
      dockerfile: Dockerfile
      target: builder  # Stop at builder stage for development
    volumes:
      - ../backend/navigation-service/src:/app/src:ro
      - ../backend/navigation-service/target:/app/target
    environment:
      SPRING_PROFILES_ACTIVE: docker,dev
      SPRING_DEVTOOLS_RESTART_ENABLED: true
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_ENABLED: ${OPENAI_ENABLED:-false}
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: DEBUG
      LOGGING_LEVEL_COM_EXAMPLE_DEMO: DEBUG
    command: ["mvn", "spring-boot:run", "-Dspring-boot.run.profiles=docker,dev"]

  # Development database with exposed port for direct access
  postgres:
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: conversation_ui
      POSTGRES_USER: conversation_user
      POSTGRES_PASSWORD: conversation_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d

  # Development Redis with exposed port
  redis:
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --appendfsync everysec

  # Hot reload for frontend development (placeholder)
  frontend-dev:
    image: node:18-alpine
    container_name: conversation-ui-frontend-dev
    working_dir: /app
    volumes:
      - ../frontend:/app:cached
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
      - "3001:3001"
    networks:
      - conversation-network
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: true
    command: sh -c "cd admin-portal && npm install && npm run dev"
    depends_on:
      - management-service
      - navigation-service

  # Development tools container
  dev-tools:
    image: alpine:latest
    container_name: conversation-ui-dev-tools
    volumes:
      - ../:/workspace:cached
    networks:
      - conversation-network
    command: tail -f /dev/null
    environment:
      WORKSPACE: /workspace

volumes:
  postgres_dev_data:
    driver: local
  frontend_node_modules:
    driver: local
